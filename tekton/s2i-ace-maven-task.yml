apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-ace-maven
  namespace: my-namespace
spec:
  description: >-
    s2i-ace-maven task clones a Git repository and builds and pushes a container
    image using S2I, an App Connect Enterprise image and Maven. The resulting
    image will be using the App Connect Enterprise integration server image from
    the entitlement registry.
  params:
    - default: .
      description: The location of the path to run s2i from.
      name: PATH_CONTEXT
      type: string
    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: not_accept
      description: Must be set to "accept" to run
      name: LICENSE
      type: string
    - default: >-
        cp.icr.io/cp/appc/ace-server-prod@sha256:8372beb29cd95d0d3de1b6587248e9997e69ef13bc77caffd6ca3f7068d7779a
      description: >-
        The runtime image to use. Should be an integration server image from the
        entitled registry. See alternatives at
        https://www.ibm.com/docs/en/app-connect/11.0.0?topic=aciccd-obtaining-app-connect-enterprise-server-image-from-cloud-container-registry 
      name: RUNTIME_IMAGE
      type: string
    - default: NA
      name: commit_id
      type: string
    - default: NA
      name: commit_message
      type: string
    - default: NA
      name: commit_user
      type: string
  resources:
    inputs:
      - description: >-
          The git repo with the source of the ACE build. A pom.xml file needs to
          be at the root level.
        name: source
        type: git
    outputs:
      - name: builtImage
        targetPath: /workspace/builtImage
        type: image
  steps:
    - command:
        - s2i
        - build
        - '-e'
        - LICENSE=$(params.LICENSE)
        - $(params.PATH_CONTEXT)
        - >-
          image-registry.openshift-image-registry.svc:5000/mvp/s2i-ace-maven:11.0.0.12
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - /gen-source/Dockerfile.gen
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      name: generate
      resources: {}
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      workingDir: /workspace/source
    - args:
        - '-c'
        - >
          echo "

          FROM $(params.RUNTIME_IMAGE)

          ENV LICENSE=$(params.LICENSE)

          # To support JVM debug EXPOSE 8888

          COPY --from=0 --chown=aceuser:0 /tmp/*.bar
          /home/aceuser/initial-config/bars/" >> /gen-source/Dockerfile.gen

          echo "Generated Dockerfile:"

          cat /gen-source/Dockerfile.gen
      command:
        - /bin/bash
      image: registry.access.redhat.com/ubi8/ubi
      name: stage-dockerfile
      resources: {}
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
    - command:
        - buildah
        - bud
        - '--storage-driver=overlay'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers'
        - '--label'
        - git_commit=$(resources.inputs.source.revision)
         - '--label'
        - git_message=$(params.commit_message)
         - '--label'
        - git_user=$(params.commit_user)
        - '-f'
        - /gen-source/Dockerfile.gen
        - '-t'
        - $(resources.outputs.builtImage.url)
        - .
      image: >-
        registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
      name: build
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
    - command:
        - buildah
        - push
        - '--storage-driver=overlay'
        - '--tls-verify=$(params.TLSVERIFY)'
        - $(resources.outputs.builtImage.url)
        - 'docker://$(resources.outputs.builtImage.url)'
      image: >-
        registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d852ca1cb1efb59d6e8c9f90d467
      name: push
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - emptyDir: {}
      name: gen-source
    - name: varlibcontainers
      persistentVolumeClaim:
        claimName: s2i-ace-maven-varlibcontainers-pvc
