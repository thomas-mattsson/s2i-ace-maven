apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: s2i-ace-maven
spec:
  description: >-
    s2i-ace-maven task clones a Git repository and builds and pushes a container
    image using S2I, an App Connect Enterprise image and Maven. The resulting
    image will be using the App Connect Enterprise integration server image from
    the entitlement registry.
  params:
    - default: .
      description: The location of the path to run s2i from.
      name: PATH_CONTEXT
      type: string
    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: not_accept
      description: Must be set to "accept" to run
      name: LICENSE
      type: string
    - default: ''
      description: >-
        The runtime image to use. Should be an integration server image from the
        entitled registry. Default is leaving it empty to use the s2i build image as runtime image.
      name: RUNTIME_IMAGE
      type: string
    - default: NA
      name: commit_id
      type: string
    - default: NA
      name: commit_message
      type: string
    - default: NA
      name: commit_user
      type: string
    - default: >-
        image-registry.openshift-image-registry.svc:5000/cp4i/s2i-ace-maven:12.0.2.0
      description: >-
        The s2i-ace-maven image build from the https://github.com/thomas-mattsson/s2i-ace-maven repo.
      name: BUILD_IMAGE
      type: string
  resources:
    inputs:
      - description: >-
          The git repo with the source of the ACE build. A pom.xml file needs to
          be at the root level.
        name: source
        type: git
    outputs:
      - name: builtImage
        targetPath: /workspace/builtImage
        type: image
  steps:
    - command:
        - s2i
        - build
        - '-e'
        - LICENSE=$(params.LICENSE)
        - $(params.PATH_CONTEXT)
        - >-
          $(params.BUILD_IMAGE)
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - /gen-source/Dockerfile.gen
      image: registry.redhat.io/ocp-tools-4-tech-preview/source-to-image-rhel8@sha256:ba51e5e74ff5a29fd429b0bb77bc2130e5284826a60d042fc4e4374381a7a308
      name: generate
      resources: {}
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
      workingDir: /workspace/source
    - args:
        - '-c'
        - >
          if [ -z $(params.RUNTIME_IMAGE) ]
          
          then
          
            echo "Using build image as runtime image."
            
          else
          
            echo "

            FROM $(params.RUNTIME_IMAGE)

            ENV LICENSE=$(params.LICENSE)

            # To support JVM debug EXPOSE 8888

            COPY --from=0 --chown=aceuser:0 /tmp/*.bar
            /home/aceuser/initial-config/bars/" >> /gen-source/Dockerfile.gen
            
          fi
          
          echo "Generated Dockerfile:"

          cat /gen-source/Dockerfile.gen  
      command:
        - /bin/bash
      image: registry.access.redhat.com/ubi8/ubi
      name: stage-dockerfile
      resources: {}
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
    - command:
        - buildah
        - bud
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers'
        - '--label'
        - git_commit=$(resources.inputs.source.revision)
         - '--label'
        - git_message=$(params.commit_message)
         - '--label'
        - git_user=$(params.commit_user)
        - '-f'
        - /gen-source/Dockerfile.gen
        - '-t'
        - $(resources.outputs.builtImage.url)
        - .
      image: >-
        registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
      name: build
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
    - command:
        - buildah
        - push
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - $(resources.outputs.builtImage.url)
        - 'docker://$(resources.outputs.builtImage.url)'
      image: >-
        registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
      name: push
      resources: {}
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
  volumes:
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: varlibcontainers
